# Task ID: 9
# Title: 채팅방 관리 API 구현
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: 채팅방 생성, 조회, 참가, 나가기 등의 기능을 제공하는 REST API 구현
# Details:
1. 채팅방 CRUD API 엔드포인트 구현
2. 채팅방 메시지 조회 API 구현
3. 사용자별 채팅방 목록 조회 API 구현
4. 권한 검증 미들웨어 적용
5. 페이지네이션 및 필터링 지원

```typescript
// backend/src/room/room.controller.ts
import { Controller, Get, Post, Body, Param, UseGuards, Request, Query } from '@nestjs/common';
import { RoomService } from './room.service';
import { JwtAuthGuard } from '../auth/jwt-auth.guard';
import { CreateRoomDto } from './dto/create-room.dto';

@Controller('rooms')
@UseGuards(JwtAuthGuard)
export class RoomController {
  constructor(private readonly roomService: RoomService) {}

  @Post()
  async create(@Body() createRoomDto: CreateRoomDto, @Request() req) {
    return this.roomService.create(createRoomDto, req.user.id);
  }

  @Get()
  async findAll(@Request() req, @Query() query) {
    return this.roomService.findAllForUser(req.user.id, {
      skip: query.skip ? parseInt(query.skip) : 0,
      take: query.take ? parseInt(query.take) : 10,
    });
  }

  @Get(':id')
  async findOne(@Param('id') id: string, @Request() req) {
    return this.roomService.findOne(id, req.user.id);
  }

  @Get(':id/messages')
  async getMessages(
    @Param('id') id: string,
    @Request() req,
    @Query() query,
  ) {
    return this.roomService.getMessages(id, req.user.id, {
      skip: query.skip ? parseInt(query.skip) : 0,
      take: query.take ? parseInt(query.take) : 50,
    });
  }
}
```

```typescript
// backend/src/room/room.service.ts
import { Injectable, NotFoundException, ForbiddenException } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { CreateRoomDto } from './dto/create-room.dto';

@Injectable()
export class RoomService {
  constructor(private prisma: PrismaService) {}

  async create(createRoomDto: CreateRoomDto, userId: string) {
    return this.prisma.room.create({
      data: {
        name: createRoomDto.name,
      },
    });
  }

  async findAllForUser(userId: string, options: { skip: number; take: number }) {
    return this.prisma.room.findMany({
      skip: options.skip,
      take: options.take,
      orderBy: {
        createdAt: 'desc',
      },
    });
  }

  async findOne(id: string, userId: string) {
    const room = await this.prisma.room.findUnique({
      where: { id },
    });

    if (!room) {
      throw new NotFoundException(`Room with ID ${id} not found`);
    }

    return room;
  }

  async getMessages(id: string, userId: string, options: { skip: number; take: number }) {
    const room = await this.findOne(id, userId);

    return this.prisma.message.findMany({
      where: {
        roomId: id,
      },
      orderBy: {
        createdAt: 'asc',
      },
      skip: options.skip,
      take: options.take,
      include: {
        user: {
          select: {
            id: true,
            name: true,
          },
        },
      },
    });
  }
}
```

# Test Strategy:
1. 채팅방 생성 API 테스트
2. 채팅방 목록 조회 API 테스트
3. 채팅방 상세 조회 API 테스트
4. 메시지 조회 API 테스트
5. 권한 검증 테스트
6. 페이지네이션 및 필터링 테스트
