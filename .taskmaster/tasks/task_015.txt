# Task ID: 15
# Title: 부하 테스트 및 배포 구성
# Status: pending
# Dependencies: 4, 5, 8, 13
# Priority: medium
# Description: 시스템 부하 테스트 수행 및 Docker/K8s 기반 배포 환경 구성
# Details:
1. 부하 테스트 스크립트 작성 (Artillery/k6)
2. 다중 인스턴스 테스트
3. Docker 이미지 빌드 스크립트 작성
4. Kubernetes 배포 매니페스트 작성
5. CI/CD 파이프라인 구성

```javascript
// loadtest/socket-test.js (k6 스크립트)
import { check, sleep } from 'k6';
import { randomString } from 'https://jslib.k6.io/k6-utils/1.1.0/index.js';
import http from 'k6/http';
import ws from 'k6/ws';

export const options = {
  stages: [
    { duration: '30s', target: 100 }, // 100명 사용자로 램프업
    { duration: '1m', target: 100 },  // 1분간 유지
    { duration: '30s', target: 500 }, // 500명으로 증가
    { duration: '1m', target: 500 },  // 1분간 유지
    { duration: '30s', target: 0 },   // 종료
  ],
};

function getAuthToken() {
  const loginRes = http.post('http://localhost:3000/auth/login', JSON.stringify({
    email: 'test@example.com',
    password: 'password',
  }), {
    headers: { 'Content-Type': 'application/json' },
  });
  
  return JSON.parse(loginRes.body).accessToken;
}

export default function() {
  const token = getAuthToken();
  const roomId = 'test-room-' + randomString(8);
  
  const url = `ws://localhost:3000/socket.io/?EIO=4&transport=websocket&auth=${token}`;
  
  const res = ws.connect(url, {}, function(socket) {
    socket.on('open', () => {
      socket.send(JSON.stringify(['join', { roomId }]));
    });
    
    socket.on('message', (data) => {
      // 메시지 처리
    });
    
    socket.setInterval(function timeout() {
      socket.send(JSON.stringify(['send', { roomId, text: 'Hello from k6 test!' }]));
    }, 5000);
    
    socket.setTimeout(function() {
      socket.close();
    }, 60000);
  });
  
  check(res, { 'Connected successfully': (r) => r && r.status === 101 });
  
  sleep(1);
}
```

```yaml
# kubernetes/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: chatbot-backend
  template:
    metadata:
      labels:
        app: chatbot-backend
    spec:
      containers:
      - name: backend
        image: ${DOCKER_REGISTRY}/chatbot-backend:${VERSION}
        ports:
        - containerPort: 3000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: database-url
        - name: REDIS_HOST
          value: redis-service
        - name: REDIS_PORT
          value: "6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: jwt-secret
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: chatbot-secrets
              key: openai-api-key
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: chatbot-backend-service
spec:
  selector:
    app: chatbot-backend
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP
```

```yaml
# kubernetes/redis.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
```

```yaml
# .github/workflows/deploy.yml
name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v2
      with:
        context: ./apps/backend
        push: true
        tags: user/chatbot-backend:latest
    
    - name: Build and push frontend
      uses: docker/build-push-action@v2
      with:
        context: ./apps/frontend
        push: true
        tags: user/chatbot-frontend:latest
    
    - name: Deploy to Kubernetes
      uses: steebchen/kubectl@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: apply -f kubernetes/
```

# Test Strategy:
1. 부하 테스트 스크립트 실행 및 결과 분석
2. 다양한 부하 시나리오 테스트
3. Docker 이미지 빌드 및 실행 테스트
4. Kubernetes 배포 테스트
5. 자동화된 CI/CD 파이프라인 테스트
