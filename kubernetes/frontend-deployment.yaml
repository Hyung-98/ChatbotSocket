apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot-frontend
  namespace: chatbot
  labels:
    app: chatbot-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: chatbot-frontend
  template:
    metadata:
      labels:
        app: chatbot-frontend
    spec:
      containers:
        - name: frontend
          image: localhost:5000/chatbot-frontend:latest
          ports:
            - containerPort: 3000
          env:
            - name: NODE_ENV
              value: 'production'
            - name: NEXT_PUBLIC_API_URL
              value: 'http://chatbot-backend-service'
            - name: NEXT_PUBLIC_WS_URL
              value: 'ws://chatbot-backend-service'
          resources:
            limits:
              cpu: '200m'
              memory: '256Mi'
            requests:
              cpu: '50m'
              memory: '128Mi'
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
                - ALL
      securityContext:
        fsGroup: 1001
---
apiVersion: v1
kind: Service
metadata:
  name: chatbot-frontend-service
  namespace: chatbot
  labels:
    app: chatbot-frontend
spec:
  selector:
    app: chatbot-frontend
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
  type: ClusterIP
